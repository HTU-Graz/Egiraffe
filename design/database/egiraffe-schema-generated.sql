-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.university
(
    id uuid,
    name_full character varying(100) NOT NULL,
    name_mid character varying(50) NOT NULL,
    name_short character varying(50) NOT NULL,
    domain_names character varying(100)[] NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."user"
(
    id uuid,
    first_names character varying(200),
    last_name character varying(200),
    primary_email uuid NOT NULL,
    password_hash character varying(250) NOT NULL,
    totp_secret character varying(50),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.email
(
    id uuid,
    address character varying(500),
    belongs_to_user uuid NOT NULL,
    of_university uuid,
    status character(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.email_status
(
    status character(20) NOT NULL,
    PRIMARY KEY (status)
);

CREATE TABLE IF NOT EXISTS public.upload
(
    id uuid,
    upload_name character varying(200) NOT NULL,
    description text NOT NULL,
    price smallint NOT NULL,
    uploader uuid NOT NULL,
    upload_date timestamp without time zone NOT NULL,
    last_modified_date timestamp without time zone NOT NULL,
    belongs_to uuid,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.course
(
    id uuid NOT NULL,
    held_at uuid NOT NULL,
    course_name character varying(200) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.purchase
(
    user_id uuid,
    upload_id uuid,
    ecs_spent smallint NOT NULL,
    purchase_date timestamp without time zone NOT NULL,
    rating smallint,
    PRIMARY KEY (user_id, upload_id)
);

CREATE TABLE IF NOT EXISTS public.system_ec_transaction
(
    affected_user uuid,
    transaction_date timestamp without time zone NOT NULL,
    amount numeric NOT NULL,
    PRIMARY KEY (affected_user, transaction_date)
);

CREATE TABLE IF NOT EXISTS public.session
(
    id uuid,
    of_user uuid,
    token bit(256) NOT NULL,
    initial_user_agent character varying(275),
    latest_user_agent character varying(275),
    initial_ip inet,
    latest_ip inet,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."user"
    ADD FOREIGN KEY (primary_email)
    REFERENCES public.email (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.email
    ADD CONSTRAINT belongs_to_user_fk FOREIGN KEY (belongs_to_user)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.email
    ADD CONSTRAINT of_university_fk FOREIGN KEY (of_university)
    REFERENCES public.university (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.email
    ADD CONSTRAINT email_status_fk FOREIGN KEY (status)
    REFERENCES public.email_status (status) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.upload
    ADD FOREIGN KEY (uploader)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.upload
    ADD FOREIGN KEY (belongs_to)
    REFERENCES public.course (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.course
    ADD FOREIGN KEY (held_at)
    REFERENCES public.university (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.purchase
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.purchase
    ADD FOREIGN KEY (upload_id)
    REFERENCES public.upload (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.system_ec_transaction
    ADD FOREIGN KEY (affected_user)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.session
    ADD FOREIGN KEY (of_user)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;